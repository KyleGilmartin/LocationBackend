let express,Location,users,auth,https,fs,mongoose,cors,config;_b5b‍.w("express",[["default",["express"],function(v){express=v}]]);_b5b‍.w("./routes/location",[["default",["Location"],function(v){Location=v}]]);_b5b‍.w("./routes/users",[["default",["users"],function(v){users=v}]]);_b5b‍.w("./routes/auth",[["default",["auth"],function(v){auth=v}]]);_b5b‍.w("https",[["default",["https"],function(v){https=v}]]);_b5b‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_b5b‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_b5b‍.w("cors",[["default",["cors"],function(v){cors=v}]]);_b5b‍.w("./config",[["default",["config"],function(v){config=v}]]);










const app = express();

app.use(cors());

const port = 3000;


// Define the database connecton and connect to it.
// Errors awill be logged to the console.
// this would normally come from a config file

//const connectionString = 'mongodb://127.0.0.1:27017/location'
const connectionString = config.connectionString;

mongoose.connect(connectionString, {
    "useNewUrlParser": true,
    "useUnifiedTopology": true,
    'useCreateIndex': true
}).
catch(error => {
    _b5b‍.g.console.log('Database connection refused' + error);
    process.exit(2);
})

const db = mongoose.connection;


db.on('error', _b5b‍.g.console.error.bind(_b5b‍.g.console, 'connection error:'));

db.once('open', () => {
    console.log("DB connected")
});

const sslOptions = {

    key: fs.readFileSync("ssl/kylelocal.key"),

    cert: fs.readFileSync("ssl/kylelocal.cert")

};



// Configuring the built-in express body parser middleware
app.use(express.urlencoded({ extended: false }));
app.use(express.json());


app.use('/locations', Location);
app.use('/users', users);
app.use('/auth', auth);


app.get('/', (req, res) =>
    res.send('Sever Working'));


// app.get('/', (req, res) =>
//     res.send('Sever working, Port number);

app.get('/bananas', (req, res) =>
    res.send('hello world, this is bananas'));

app.all('*', (req, res) => {
    res.status(404).json({
        status: 'fail',
        message: `Can't find ${req.originalUrl} on this server!`
    });
});







app.listen(port, () => console.log(`Example app listening on 
  ${port}!`))


https.createServer(sslOptions, app).listen(8080, () =>
    console.log('listening on 8080 too, don\'t forget the https'));